-----------------------------------Complexity-------------------------------------
Time complexity: O(n)
Space complexity: O(n)


-------------------------------------Code-----------------------------------------
class Solution {
    public int maxVowels(String s, int k) {
        int n = s.length(), count = 0, max = 0;
        char[] chars = s.toCharArray();

        for(int i = 0; i < k; i++){
            char c = chars[i];
            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c =='u'){
                count ++;
                max = Math.max(count, max);
            }
        }

        for(int i = k; i < n; i++){
            char c1 = chars[i-k];
            char c2 = chars[i];

            if(c1 == 'a' || c1 == 'e' || c1 == 'i' || c1 == 'o' || c1 =='u')
               count--;
            if(c2 == 'a' || c2 == 'e' || c2 == 'i' || c2 == 'o' || c2 =='u')
               count++;
            max = Math.max(count, max);
        }
        return max;
    }
}
0

----------------------------------------------Complexity---------------------------------------
Time complexity: O(n)
Space complexity: O(n)

--------------------------------------------------Code-----------------------------------------
class Solution {
      public int[][] generateMatrix(int n) {
        int matrix[][] = new int[n][n];
        
            if (n == 1 )
            {
                matrix[0][0] = 1;
                return matrix;
            }
            
            if (n == 0)
                return matrix;

            int rowBegin = 0, k  = 1;
            int rowEnd = matrix.length - 1;
            int columnBegin = 0;
            int columnEnd = matrix[0].length - 1;

            while (columnBegin <= columnEnd && rowBegin <= rowEnd) {
                for (int i = columnBegin; i <= columnEnd; i++)
                    matrix[rowBegin][i] = k++;

                rowBegin++;

                for (int i = rowBegin; i <= rowEnd; i++)
                    matrix[i][columnEnd] = k++;

                columnEnd--;

                if (rowBegin <= rowEnd)
                    for (int i = columnEnd; i >= columnBegin; i--)
                        matrix[rowEnd][i] = k++;

                rowEnd--;

                if (columnBegin <= columnEnd)
                    for (int i = rowEnd; i >= rowBegin; i--)
                        matrix[i][columnBegin] = k++;

                columnBegin++;

            }

            return matrix;

    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> list = new ArrayList();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        int n = 0;

        traverseBreadthSearch(root, 1);
        n = list.size();

        for(int i = 0; i < n; i++)
            if(i % 2 == 1)
                Collections.reverse(list.get(i));

        return list;
    }
    
    private List<List<Integer>> traverseBreadthSearch(TreeNode root, int level){
        if(root == null) return list;

        if(list.size() < level){
            List<Integer> elemList = new ArrayList();
            elemList.add(root.val);
            list.add(elemList);
        }else{
            List<Integer> elemList = list.get(level-1);
            elemList.add(root.val);
        }

        traverseBreadthSearch(root.left, level+1);
        traverseBreadthSearch(root.right, level+1);

        return list;
    }
}

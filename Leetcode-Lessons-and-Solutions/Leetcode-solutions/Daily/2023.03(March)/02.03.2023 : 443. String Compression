Intuition
To solve the problem we may use String builded. In other words, we travese array from left to right and count number of same chars. 
If char which we visit is not same with that saved previously, we should append this chatacter to the string. 
If number of this character is greater than 1, it is also should be append to the string builder. 
Each time, chars(saved to local variable and current array element) are different , 
we initialize count to 1 and s to new current character. After traversing characters, we should copy sb builder value to out array.

Complexity
Time complexity: O(n + k)
n is size of inputer array and k is length of string builder.

Space complexity: O(k)

Code
class Solution {
    fun compress(chars: CharArray): Int {
        if(chars.size == 1) return 1
        val sb = StringBuilder()
        var s = chars[0]
        var count = 0
        val n = chars.size
       
        for(i in 0 until n){
            if(chars[i] == s){
                count++
            }else{
                sb.append("" + chars[i-1])
                if(count != 1)
                    sb.append(count)
                count = 1
                s = chars[i]
            }
        }
        if(s == chars[n-1]){
            sb.append("" + chars[n-1])
            if(count != 1)
                sb.append(count)
        }
        val str = sb.toString()
        for(i in 0 until str.length)
            chars[i] = str[i]
        return sb.length
    }
}

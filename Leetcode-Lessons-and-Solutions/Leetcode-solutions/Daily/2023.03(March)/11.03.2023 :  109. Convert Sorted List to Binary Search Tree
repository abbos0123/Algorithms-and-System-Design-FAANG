------------------------------------------------Approach----------------------------------------------
Collect all elements of list to array list. Then find mid of list. it will be root. all previouse
elements well be left children and all post elements will be right children. to do this until all
elements of list will be used.

----------------------------------------------Complexity----------------------------------------------
Time complexity: O(n)
Space complexity: O(n)

------------------------------------------------Code--------------------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<Integer> list;
    public TreeNode sortedListToBST(ListNode head) {
        list = new ArrayList();
        
        while(head != null){
            list.add(head.val);
            head = head.next;
        }

        return build(0, list.size() -1);
    }

    private TreeNode build(int left, int right){
        if(left > right) return null;
        int mid = (left + right)/2;
        
        TreeNode root = new TreeNode(list.get(mid));
        root.left = build(left, mid-1);
        root.right = build(mid + 1, right);

        return root;
    }
}

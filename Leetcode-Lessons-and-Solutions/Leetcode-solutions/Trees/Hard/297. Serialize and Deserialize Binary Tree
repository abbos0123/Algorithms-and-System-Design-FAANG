Complexity
Time complexity: O(n)
Space complexity: O(n)
Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        StringBuilder sb = new StringBuilder();
        traverseTree(root, sb);

        return sb.toString();
    }

    private void traverseTree(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("#,");
            return;
        }

        sb.append(root.val +",");
        traverseTree(root.left, sb);
        traverseTree(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 0) return null;
        
        String[] array = data.split(",");
        Queue<String> queue = new LinkedList<String>();
        for(String s: array)
         queue.add(s);

         return build(queue);
    }

    private TreeNode build(Queue<String> q){
        String s = q.poll();

        if(s.equals("#")) return null;

        TreeNode root = new TreeNode(Integer.parseInt(s));
        root.left = build(q);
        root.right = build(q);
        return root;
    }

//https://leetcode.com/problems/sum-of-left-leaves/description/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int sum=0;
    public int sumOfLeftLeaves(TreeNode root) {
        sum = 0;
        findLS(root);
        return sum;

    }

    private void findLS(TreeNode root){

        if(root==null) return;

        if(root.left!=null && root.left.left==null && root.left.right==null){
            sum+=root.left.val;
        }
        findLS(root.left);
        findLS(root.right);
    }
}
-----------------------------------------------------------------------------------
class Solution {
    private int sum=0;
    public int sumOfLeftLeaves(TreeNode root) {
        sum = 0;
        findLS(root, false);
        return sum;

    }

    private void findLS(TreeNode root, boolean isLeft){

        if(root==null) return;

        if(root.left==null&& root.right==null && isLeft){
            sum+=root.val;
        }
        findLS(root.left, true);
        findLS(root.right, false);
 
  }
}

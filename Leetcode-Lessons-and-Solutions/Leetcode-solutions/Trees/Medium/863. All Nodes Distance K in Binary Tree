Link: https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/submissions/904015284/
Complexity
Time complexity: O(N ^ N)
Space complexity: O(N)
Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        if(root ==null) return new ArrayList<Integer>();
        List<Integer> list = new ArrayList();
        helper(root, root, target.val, k, list);
        return list;
    }

    private void helper(TreeNode root, TreeNode orginRoot, int target, int k, List<Integer> list){
        if(root == null) return;

        if(findDistance(orginRoot, root.val, target) == k) list.add(root.val);
        helper(root.left, orginRoot, target, k, list);
        helper(root.right, orginRoot, target, k, list);
    }

    //find lowest common ansestor of tree
    public static TreeNode lowestCommonAncestor(TreeNode root, int n1, int n2){
        if (root == null)
            return root;
        if (root.val == n1 || root.val == n2)
            return root;
 
        TreeNode left = lowestCommonAncestor(root.left, n1, n2);
        TreeNode right = lowestCommonAncestor(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
        if (left == null && right == null)
            return null;
        if (left != null)
            return left;
        else
            return right;
    }

    //find level of element of tree node
    public static int findLevel(TreeNode root, int a, int level){
        if (root == null)
            return -1;
        if (root.val == a)
            return level;
        int left = findLevel(root.left, a, level + 1);
        if (left == -1)
            return findLevel(root.right, a, level + 1);
        return left;
    }

    //find distance between two nodes
    public static int findDistance(TreeNode root, int a, int b){
        TreeNode lca = lowestCommonAncestor(root, a, b);
 
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
 
        return d1 + d2;
    }
}

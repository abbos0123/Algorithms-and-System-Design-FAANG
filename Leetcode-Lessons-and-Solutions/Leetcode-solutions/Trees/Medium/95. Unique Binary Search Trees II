Link: https://leetcode.com/problems/unique-binary-search-trees-ii/description/

class Solution {
     List<TreeNode> list; 

    public List<TreeNode> generateTrees(int n) {
        list = new ArrayList();
        int[] arr = new int[n];
        for(int i = 1; i <=n; i++)
            arr[i-1] = i;

        combinate(arr, 0);
        return list;
    }

    private void combinate(int[] nums, int index){
        if(index == nums.length-1){
            boolean b = false;
            TreeNode newRoot = buildTree(nums);

            for(TreeNode root: list)
               if(isSame(root, newRoot)){
                   b = true;
                   break;
               }
            
            if(!b)
               list.add(newRoot);

            return;
        }

        for(int i = index; i < nums.length; i++){
            int t = nums[i];
            nums[i] = nums[index];
            nums[index] = t;

            combinate(nums, index + 1);

            int p = nums[i];
            nums[i] = nums[index];
            nums[index] = p;
        }
    }

    private TreeNode buildTree(int[] nums){
        TreeNode root = new TreeNode(nums[0]);
        int n = nums.length;

        for(int i = 1; i < n; i++)
           add(root, nums[i]);
        
        return root;
    }

    private void add(TreeNode root, int n){
        if(root == null) return;

        if(root.val > n){
            if(root.left == null){
                root.left = new TreeNode(n);
                return;
            }else add(root.left, n);     
        }else
            if(root.right == null){
                root.right = new TreeNode(n);
                return;
            }else add(root.right, n);        
    }

    private boolean isSame(TreeNode root1, TreeNode root2){
        if(root1 == null && root2 == null) return true;
        if(root1 == null || root2 == null) return false;

        if(root1.val != root2.val) return false;

        return isSame(root1.left, root2.left) && isSame(root1.right, root2.right);
    }
}




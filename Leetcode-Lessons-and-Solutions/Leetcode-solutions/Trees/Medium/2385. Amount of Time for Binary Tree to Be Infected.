/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int maxDeepthLeft;
    int maxDeepthRight;
    List<Integer> lowestLeavesLeft;
    List<Integer> lowestLeavesRight;
    public int amountOfTime(TreeNode root, int start) {
        List<Integer> leaves = new ArrayList();
        int max = 0;

        maxDeepthLeft = -1;
        maxDeepthRight = -1;
        lowestLeavesLeft = new ArrayList();
        lowestLeavesRight = new ArrayList();
        findLowestLeaf(root.left, 0, true);
        findLowestLeaf(root.right, 0, false);

        System.out.println(lowestLeavesLeft);
        System.out.println(lowestLeavesRight);

        for(int k : lowestLeavesLeft)
           max = Math.max(max, findDistance(root, k, start));
        
        for(int k : lowestLeavesRight)
           max = Math.max(max, findDistance(root, k, start));

        max = Math.max(max, findDistance(root, root.val, start));
        return max;
    }

    private void findLowestLeaf(TreeNode root, int level, boolean isLeft){
        if(root == null) return;

        if(root.left == null && root.right == null)
            if(level > maxDeepthRight && !isLeft){
                  lowestLeavesRight = new ArrayList();
                  lowestLeavesRight.add(root.val);
                  maxDeepthRight = level;
            }else if(level == maxDeepthRight && !isLeft){
                  lowestLeavesRight.add(root.val);
                  maxDeepthRight = level;
            }else if(level > maxDeepthLeft && isLeft){
                  lowestLeavesLeft = new ArrayList();
                  lowestLeavesLeft.add(root.val);
                  maxDeepthLeft = level;
            }else if(level == maxDeepthLeft && isLeft){
                  lowestLeavesLeft.add(root.val);
                  maxDeepthLeft = level;
            }

        findLowestLeaf(root.left, level+1, isLeft);
        findLowestLeaf(root.right, level+1, isLeft);
    }

    //find lowest common ansestor of tree
    public static TreeNode lowestCommonAncestor(TreeNode root, int n1, int n2){
        if (root == null)
            return root;
        if (root.val == n1 || root.val == n2)
            return root;
 
        TreeNode left = lowestCommonAncestor(root.left, n1, n2);
        TreeNode right = lowestCommonAncestor(root.right, n1, n2);
 
        if (left != null && right != null)
            return root;
        if (left == null && right == null)
            return null;
        if (left != null)
            return left;
        else
            return right;
    }

    //find level of element of tree node
    public static int findLevel(TreeNode root, int a, int level){
        if (root == null)
            return -1;
        if (root.val == a)
            return level;
        int left = findLevel(root.left, a, level + 1);
        if (left == -1)
            return findLevel(root.right, a, level + 1);
        return left;
    }

    //find distance between two nodes
    public static int findDistance(TreeNode root, int a, int b){
        TreeNode lca = lowestCommonAncestor(root, a, b);
 
        int d1 = findLevel(lca, a, 0);
        int d2 = findLevel(lca, b, 0);
 
        return d1 + d2;
    }

}

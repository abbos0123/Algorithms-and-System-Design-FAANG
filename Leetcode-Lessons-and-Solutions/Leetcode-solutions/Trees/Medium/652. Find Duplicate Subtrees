Link: https://leetcode.com/problems/find-duplicate-subtrees/submissions/903419948/

Approach
Prepresenting tree as string can help us easly compare two trees whereth they are similar or not. If two trees are same, string representation of them would also be same. That is why we can use string form of tree as key for this three. If keys are similar, trees are also same. Fot this we can use map data structure.

we can see every node in the tree as a root of other individual tree. Find string form of each node of tree and could how many the same tree exist.
if number of same trees of spesific string key(string representation of tree) equals 2 we add this tree to result list .
return result list.
Complexity
Time complexity: O(N)
Space complexity: O(n)
Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> list;
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
      list = new ArrayList();
      readTree(root, new HashMap());

      return list;
    }

    private String readTree(TreeNode root, Map<String, Integer> map){
        if(root == null) return ""; 
        String s = "("+readTree(root.left, map) + ")" + root.val + "(" + readTree(root.right, map)+")";
       
        map.put(s, map.getOrDefault(s, 0) +1);
       
        if(map.get(s) == 2) list.add(root);
        
        return s;
    }
}

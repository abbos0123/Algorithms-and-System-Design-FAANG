class Trie {
    private Node root;

    public Trie() {
        root = new Node(' ');
    }
    
    public void insert(String word) {
        Node currentNode = root;
        Map<Character, Node> children = root.children;
        for(char c : word.toCharArray()){
            if(children.containsKey(c)){
              currentNode = children.get(c);
            }else{
                currentNode = new Node(c);
                children.put(c, currentNode);
            }
            children = currentNode.children;
        }
        currentNode.isEndOfWord = true;
    }

    public boolean startsWith(String prefix) {
        return prefixHelper(prefix);
    }

    private boolean prefixHelper(String word) {
        Node currentNode = null;
        Map<Character, Node > children = root.children;
        for(char c : word.toCharArray()){
            if(!children.containsKey(c)) return false;
            currentNode = children.get(c);
            children = currentNode.children;
        }
     return true;   
    }
    
    public boolean search(String word) {
        Node currentNode = null;
        Map<Character, Node > children = root.children;
        for(char c : word.toCharArray()){
            if(!children.containsKey(c)) return false;
            currentNode = children.get(c);
            children = currentNode.children;
        }

     return currentNode.isEndOfWord;   
    }
}

class Node{
    public char character;
    public boolean isEndOfWord;
    public Map<Character, Node> children = new HashMap();

    public Node(char c){
        character = c;
    }
}
/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */

class Solution {
 
    public boolean isPossibleDivide(int[] nums, int k) {
        int n = nums.length;
        Integer[] keys;
        int pointer = 0;
        Map<Integer, Integer> map = new HashMap();
        if (n % k != 0 || n == k) return false;
        
        

        for (int i : nums)
            map.put(i, map.getOrDefault(i, 0) + 1);

        keys = map.keySet().toArray(new Integer[0]);
        Arrays.sort(keys);


        while (pointer < keys.length){
            int val = map.getOrDefault(keys[pointer], 0);

            if (val > 0){
                for (int i = 0; i < k; i++){
                    int quOfCur = map.getOrDefault(keys[pointer]+i, -1);
                    if (quOfCur <= 0)
                        return false;
                    map.put(keys[i+pointer], quOfCur-1);
                }
            }else if (val < 0)
                return false;

            if (map.get(keys[pointer]) == 0)
                pointer++;
        }
        
        return true;
    }
}

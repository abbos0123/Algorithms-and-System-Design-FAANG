-------------------------------------------------Complexity--------------------------------------
Time complexity: O(n^2)
Space complexity: O(n)
----------------------------------------------------Code-----------------------------------------
class Solution {
    public String shortestCompletingWord(String licensePlate, String[] words) {
      int[] target = count(licensePlate);
      int length = Integer.MAX_VALUE;
      String result = "";

      for(String word : words)
          if(check(target, count(word)) && length > word.length()){
              length = word.length();
              result = word;
          }
       
       return result;
    }

    private boolean check(int[] target, int[] option){
        for(int i = 0; i < 26; i++)
            if(target[i] != 0 && target[i] > option[i]) return false; 
        return true;
    }

    private int[] count(String s){
        int[] letters = new int[26];
        String str = s.toLowerCase();
    
        for(char c : str.toCharArray())
            if(c-'a' > -1 && c - 'a' < 26)
                letters[c-'a']++;

        return letters;
    }
}
-------------------------------------------------------------------------------------------------

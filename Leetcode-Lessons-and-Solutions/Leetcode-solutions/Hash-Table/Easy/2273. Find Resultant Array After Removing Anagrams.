----------------------------------------Complexity---------------------------
Time complexity: O(n^m)
n is number of words
m length of all words
Space complexity: O(n)
-----------------------------------------Code-------------------------------
class Solution {
    private int[] table = new int[26];
    public List<String> removeAnagrams(String[] words) {
        List<String> list = new LinkedList();
        int n = words.length;
        
        for(int i = 0; i < n; i++){
            if(list.size() == 0)
               list.add(words[i]);
            else if(!isAnagram(list.get(list.size() -1), words[i]))
               list.add(words[i]); 
        }

        return list;
    }

    private boolean isAnagram(String s1, String s2){
        if(s1.length() != s2.length()) return false;
        for(int i = 0; i < 26; i++) table[i] = 0;

        for(char c : s1.toCharArray()) table[c -'a']++;
        for(char c : s2.toCharArray()) table[c -'a']--;
        for(int i = 0; i < 26; i++) if(table[i] != 0) return false;
        return true;
    }
}

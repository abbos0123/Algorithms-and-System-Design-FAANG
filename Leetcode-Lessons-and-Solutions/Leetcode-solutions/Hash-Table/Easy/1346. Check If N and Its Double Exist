class Solution {
  public boolean checkIfExist(int[] arr) {
        quickSort(arr, 0, arr.length - 1);
     
     var zeroIndex = binarySearch(arr, 0, arr.length - 1, 0);
     if (zeroIndex != -1){
            if (zeroIndex -1 >=0 && arr[zeroIndex-1] == 0 || zeroIndex + 1 < arr.length && arr[zeroIndex+1] == 0)
                return true;
      }
      
      for (int i = 0; i < arr.length - 1; i++) {
            var result = binarySearch(arr, 0, arr.length - 1, 2 * arr[i]);
            if (result != -1 && result != i)
                return true;
        }
        return false;
    }

    int binarySearch(int arr[], int l, int r, int x) {
        if (r >= l) {
            int mid = l + (r - l) / 2;

            if (arr[mid] == x)
                return mid;

            if (arr[mid] > x)
                return binarySearch(arr, l, mid - 1, x);

            return binarySearch(arr, mid + 1, r, x);
        }

        return -1;
    }

    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return (i + 1);
    }
    static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
